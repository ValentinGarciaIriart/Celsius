steps:
  # Step 1: Install dependencies
  - name: 'node'
    entrypoint: 'npm'
    args: 
      - 'install'
  
  # Step 2: Run tests
  - name: 'node'
    entrypoint: 'npm'
    args: 
      - 'test'

  # Step 9: Configurar kubectl para acceder a tu clúster de GKE
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '--project=still-descent-423419-c7'
      - '--zone=$_CLUSTER_ZONE'
      - '$_CLUSTER_NAME'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=$_CLUSTER_ZONE'
      - 'CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER_NAME'
  
  # Step 10: Eliminar el namespace existente (si lo hay)
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        kubectl delete namespace valenfahr || echo "Namespace valenfahr does not exist, continuing..."
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=$_CLUSTER_ZONE'
      - 'CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER_NAME'
  
  # Step 11: Crear un nuevo namespace
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'create'
      - 'namespace'
      - 'valenfahr'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=$_CLUSTER_ZONE'
      - 'CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER_NAME'

  # Step 13: Autenticar con Azure y configurar kubectl
  - name: 'mcr.microsoft.com/azure-cli'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        az login --service-principal -u "$$AZURE_CLIENT_ID" -p "$$AZURE_CLIENT_SECRET" --tenant "$$AZURE_TENANT_ID"
        az aks get-credentials --resource-group "$$AKS_RESOURCE_GROUP" --name $_AKS_CLUSTER_NAME
    secretEnv: ['AZURE_CLIENT_ID', 'AZURE_CLIENT_SECRET', 'AZURE_TENANT_ID','AKS_RESOURCE_GROUP']

  # Step 14: Verificar si el namespace existe y borrarlo si es necesario
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if kubectl get namespace $_NAMESPACE &> /dev/null; then
          kubectl delete namespace $_NAMESPACE
        fi
        kubectl create namespace $_NAMESPACE
    secretEnv: ['AZURE_CLIENT_ID', 'AZURE_CLIENT_SECRET', 'AZURE_TENANT_ID','AKS_RESOURCE_GROUP']
  
  # Step 3: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-docker.pkg.dev/still-descent-423419-c7/celfahr/celfahr:$_TAG'
      - '.'
  
  # Step 4: Push the image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-docker.pkg.dev/still-descent-423419-c7/celfahr/celfahr:$_TAG'
  
  # Step 5: Tag the image for Docker Hub
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'tag'
      - 'us-docker.pkg.dev/still-descent-423419-c7/celfahr/celfahr:$_TAG'
      - 'valentingarciairiart/celfahr:$_TAG'
  
  # Step 6: Login to Docker Hub
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "$$DOCKER_PASSWORD" | docker login -u "$$DOCKER_USER" --password-stdin
    secretEnv: ['DOCKER_USER', 'DOCKER_PASSWORD']
  
  # Step 7: Push the image to Docker Hub
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'valentingarciairiart/celfahr:$_TAG'
  
  # Step 8: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'celsiusfahr-service'
      - '--image'
      - 'us-docker.pkg.dev/still-descent-423419-c7/celfahr/celfahr:$_TAG'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--port'
      - '3000'
      - '--allow-unauthenticated'
  
  # Step 12: Aplicar el manifiesto de Kubernetes a GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'deployment.yaml'
      - '-n'
      - 'valenfahr'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=$_CLUSTER_ZONE'
      - 'CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER_NAME'

  # Step 13: Autenticar con Azure y configurar kubectl
  - name: 'mcr.microsoft.com/azure-cli'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        az login --service-principal -u "$$AZURE_CLIENT_ID" -p "$$AZURE_CLIENT_SECRET" --tenant "$$AZURE_TENANT_ID"
        az aks get-credentials --resource-group "$$AKS_RESOURCE_GROUP" --name $_AKS_CLUSTER_NAME
    secretEnv: ['AZURE_CLIENT_ID', 'AZURE_CLIENT_SECRET', 'AZURE_TENANT_ID','AKS_RESOURCE_GROUP']

  # Step 15: Desplegar manifiesto YAML en el clúster de AKS
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        kubectl apply -f ./deployment.yaml --namespace $_NAMESPACE
    secretEnv: ['AZURE_CLIENT_ID', 'AZURE_CLIENT_SECRET', 'AZURE_TENANT_ID','AKS_RESOURCE_GROUP']

images:
  - 'us-docker.pkg.dev/still-descent-423419-c7/celfahr/celfahr:$_TAG'
  - 'valentingarciairiart/celfahr:$_TAG'

availableSecrets:
  secretManager:
  - versionName: "projects/still-descent-423419-c7/secrets/dckusr/versions/latest"
    env: "DOCKER_USER"
  - versionName: "projects/still-descent-423419-c7/secrets/dckpsw/versions/latest"
    env: "DOCKER_PASSWORD"
  - versionName: "projects/still-descent-423419-c7/secrets/azclid/versions/latest"
    env: "AZURE_CLIENT_ID"
  - versionName: "projects/still-descent-423419-c7/secrets/azclisec/versions/latest"
    env: "AZURE_CLIENT_SECRET"
  - versionName: "projects/still-descent-423419-c7/secrets/aztenant/versions/latest"
    env: "AZURE_TENANT_ID"
  - versionName: "projects/still-descent-423419-c7/secrets/azrg/versions/latest"
    env: "AKS_RESOURCE_GROUP"
